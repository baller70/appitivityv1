---
description: 
globs: 
alwaysApply: true
---
Generated by cursor.directory
Optimzed rules
Mon, Jun 16, 2025, 7:55:35 AM
Please adapt the globs depending on your project structure.

---
name: nextjs-best-practices.mdc
description: Best practices for Next.js applications and routing
globs: **/*.{ts,tsx}
---

- Use the App Router for better performance and organization.
- Implement proper error boundaries to handle errors gracefully.
- Optimize data fetching with `getServerSideProps` or `getStaticProps` as needed.
- Utilize middleware for authentication and authorization.

---
name: typescript-best-practices.mdc 
description: TypeScript coding standards and type safety guidelines
globs: **/*.{ts,tsx}
---

- Enable strict mode in `tsconfig.json` for better type safety.
- Prefer using interfaces over type aliases for object shapes.
- Use type guards to ensure type safety in conditional logic.
- Leverage generics for reusable components and functions.

---
name: tailwindcss-best-practices.mdc
description: Guidelines for styling with Tailwind CSS
globs: **/*.{ts,tsx,css}
---

- Use utility-first classes for rapid styling and layout.
- Create custom themes using Tailwind's configuration for consistency.
- Utilize `@apply` for reusable styles in your CSS files.
- Ensure responsive design by using Tailwind's responsive utilities.

---
name: radix-ui-best-practices.mdc
description: Best practices for using Radix UI components
globs: **/*.{ts,tsx}
---

- Use Radix components for accessibility and composability.
- Ensure proper keyboard navigation and focus management.
- Customize components using the `as` prop for flexibility.
- Follow the documentation for best practices on state management.

---
name: playwright-best-practices.mdc
description: Best practices for end-to-end testing with Playwright
globs: **/*.{ts,tsx}
---

- Organize tests into logical suites for better maintainability.
- Use fixtures to set up test data and state.
- Implement page object patterns for reusable test code.
- Run tests in headless mode for CI/CD integration.

---
name: storybook-best-practices.mdc
description: Best practices for Storybook usage
globs: **/*.{ts,tsx}
---

- Create stories for all components to document their usage.
- Use addons like `@storybook/addon-a11y` for accessibility checks.
- Organize stories into categories for better navigation.
- Leverage Storybook's testing capabilities to ensure component integrity.

---
name: supabase-best-practices.mdc
description: Best practices for using Supabase
globs: **/*.{ts,tsx}
---

- Use environment variables to manage Supabase keys securely.
- Implement row-level security for data protection.
- Utilize Supabase's real-time capabilities for dynamic applications.
- Structure your database schema for optimal performance and scalability.

---
name: framer-motion-best-practices.mdc
description: Best practices for animations with Framer Motion
globs: **/*.{ts,tsx}
---

- Use `motion` components for declarative animations.
- Optimize performance by using `shouldComponentUpdate` or `React.memo`.
- Leverage variants for complex animations and transitions.
- Keep animations subtle to enhance user experience without distraction.

---
name: tiptap-best-practices.mdc
description: Best practices for using Tiptap as a rich text editor
globs: **/*.{ts,tsx}
---

- Use extensions to enhance functionality and maintain modularity.
- Implement proper state management for editor content.
- Customize the toolbar for a better user experience.
- Ensure accessibility by following ARIA guidelines for rich text editors.