// Optimized imports for better tree shaking and smaller bundle size\n\n// Lucide React - Import only needed icons\nexport {\n  ArrowLeft,\n  ArrowRight,\n  BarChart3,\n  Bookmark,\n  Calendar,\n  ChevronDown,\n  ChevronUp,\n  Clock,\n  Download,\n  ExternalLink,\n  Eye,\n  Filter,\n  Folder,\n  Globe,\n  Hash,\n  Heart,\n  Home,\n  Menu,\n  MoreHorizontal,\n  Plus,\n  Search,\n  Settings,\n  Star,\n  Tag,\n  Trash2,\n  TrendingUp,\n  User,\n  X,\n  CheckCircle,\n  XCircle,\n  Activity,\n  Target,\n  Zap,\n  Users,\n  Minus,\n  ArrowUpRight,\n  ArrowDownRight,\n  RefreshCw,\n  PieChart\n} from 'lucide-react'\n\n// Date-fns - Import only needed functions\nexport {\n  format,\n  isToday,\n  isYesterday,\n  isThisWeek,\n  isThisMonth,\n  isThisYear,\n  parseISO,\n  formatDistanceToNow,\n  startOfDay,\n  endOfDay,\n  subDays,\n  subWeeks,\n  subMonths,\n  addDays,\n  addWeeks,\n  addMonths,\n  differenceInDays,\n  differenceInHours,\n  differenceInMinutes\n} from 'date-fns'\n\n// Recharts - Import only needed components\nexport {\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line\n} from 'recharts'\n\n// React utilities\nexport {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n  useRef,\n  useReducer,\n  useContext,\n  createContext,\n  forwardRef,\n  memo,\n  lazy,\n  Suspense\n} from 'react'\n\n// Next.js optimized imports\nexport { default as Image } from 'next/image'\nexport { default as Link } from 'next/link'\nexport { default as Head } from 'next/head'\nexport { default as Script } from 'next/script'\nexport { useRouter } from 'next/navigation'\n\n// Clerk optimized imports\nexport {\n  useUser,\n  useAuth,\n  SignInButton,\n  SignOutButton,\n  UserButton\n} from '@clerk/nextjs'\n\n// Utility functions for performance\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let timeoutId: NodeJS.Timeout\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => func(...args), delay)\n  }\n}\n\nexport const throttle = <T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let lastCall = 0\n  return (...args: Parameters<T>) => {\n    const now = Date.now()\n    if (now - lastCall >= delay) {\n      lastCall = now\n      func(...args)\n    }\n  }\n}\n\n// Memoization helper\nexport const memoize = <T extends (...args: any[]) => any>(fn: T): T => {\n  const cache = new Map()\n  return ((...args: any[]) => {\n    const key = JSON.stringify(args)\n    if (cache.has(key)) {\n      return cache.get(key)\n    }\n    const result = fn(...args)\n    cache.set(key, result)\n    return result\n  }) as T\n}\n\n// Performance monitoring\nexport const measurePerformance = (name: string, fn: () => void) => {\n  const start = performance.now()\n  fn()\n  const end = performance.now()\n  console.log(`${name} took ${end - start} milliseconds`)\n}\n\n// Lazy loading helper\nexport const createLazyComponent = (importFn: () => Promise<any>) => {\n  return lazy(() => importFn().catch(() => ({ default: () => <div>Error loading component</div> })))\n}" 